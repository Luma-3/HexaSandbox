//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Script/Input/PlayerInputMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Input
{
    public partial class @PlayerInputMap: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInputMap()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputMap"",
    ""maps"": [
        {
            ""name"": ""Physic Input "",
            ""id"": ""0ea605e7-8187-4047-ad8c-ca15e2aefcf7"",
            ""actions"": [
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""a1f1eb9e-5418-4f90-a910-9d9db226a705"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""a6c3bf3f-558b-44fc-a6c8-7cb753a3a3f2"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""2a9f9158-3be8-4ef2-b532-690797445e3c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""af7708c7-9e2d-496a-895f-5bc4d9093ecf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1f82fe21-777e-41f5-bfef-d7003f72ba4f"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(x=0.05,y=0.05),InvertVector2(invertX=false)"",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""3D Vector"",
                    ""id"": ""ff9de1e2-16c1-400a-8f88-6d1515c966a1"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""6e9d648d-d674-4206-a3e0-164b375a54e8"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""95b552c0-d285-4ccc-8385-1db9a4774a80"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""232df4ed-6960-423b-b8b5-8274fa0c2e3b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""4496529e-7e9d-4499-9d25-33309a1600ff"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""forward"",
                    ""id"": ""19fe1d29-93d4-4998-8b72-d65697e640ff"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""backward"",
                    ""id"": ""d94711f6-a367-40b2-958d-81b1f28f7de8"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4152c657-5581-46ff-8ac3-23d2ea5b8bde"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""69259387-7503-4f45-ba67-4e98b02e74c4"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Ui Input"",
            ""id"": ""8522c6e4-64c1-4cab-8b19-cf43396965f7"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""724fb1b7-b807-435e-8888-667a4453efd0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""92599c86-0702-45f3-a7ce-c66a7d53fcd9"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Physic Input 
            m_PhysicInput = asset.FindActionMap("Physic Input ", throwIfNotFound: true);
            m_PhysicInput_Look = m_PhysicInput.FindAction("Look", throwIfNotFound: true);
            m_PhysicInput_Move = m_PhysicInput.FindAction("Move", throwIfNotFound: true);
            m_PhysicInput_Sprint = m_PhysicInput.FindAction("Sprint", throwIfNotFound: true);
            m_PhysicInput_Jump = m_PhysicInput.FindAction("Jump", throwIfNotFound: true);
            // Ui Input
            m_UiInput = asset.FindActionMap("Ui Input", throwIfNotFound: true);
            m_UiInput_Newaction = m_UiInput.FindAction("New action", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Physic Input 
        private readonly InputActionMap m_PhysicInput;
        private List<IPhysicInputActions> m_PhysicInputActionsCallbackInterfaces = new List<IPhysicInputActions>();
        private readonly InputAction m_PhysicInput_Look;
        private readonly InputAction m_PhysicInput_Move;
        private readonly InputAction m_PhysicInput_Sprint;
        private readonly InputAction m_PhysicInput_Jump;
        public struct PhysicInputActions
        {
            private @PlayerInputMap m_Wrapper;
            public PhysicInputActions(@PlayerInputMap wrapper) { m_Wrapper = wrapper; }
            public InputAction @Look => m_Wrapper.m_PhysicInput_Look;
            public InputAction @Move => m_Wrapper.m_PhysicInput_Move;
            public InputAction @Sprint => m_Wrapper.m_PhysicInput_Sprint;
            public InputAction @Jump => m_Wrapper.m_PhysicInput_Jump;
            public InputActionMap Get() { return m_Wrapper.m_PhysicInput; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PhysicInputActions set) { return set.Get(); }
            public void AddCallbacks(IPhysicInputActions instance)
            {
                if (instance == null || m_Wrapper.m_PhysicInputActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PhysicInputActionsCallbackInterfaces.Add(instance);
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Sprint.started += instance.OnSprint;
                @Sprint.performed += instance.OnSprint;
                @Sprint.canceled += instance.OnSprint;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }

            private void UnregisterCallbacks(IPhysicInputActions instance)
            {
                @Look.started -= instance.OnLook;
                @Look.performed -= instance.OnLook;
                @Look.canceled -= instance.OnLook;
                @Move.started -= instance.OnMove;
                @Move.performed -= instance.OnMove;
                @Move.canceled -= instance.OnMove;
                @Sprint.started -= instance.OnSprint;
                @Sprint.performed -= instance.OnSprint;
                @Sprint.canceled -= instance.OnSprint;
                @Jump.started -= instance.OnJump;
                @Jump.performed -= instance.OnJump;
                @Jump.canceled -= instance.OnJump;
            }

            public void RemoveCallbacks(IPhysicInputActions instance)
            {
                if (m_Wrapper.m_PhysicInputActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPhysicInputActions instance)
            {
                foreach (var item in m_Wrapper.m_PhysicInputActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PhysicInputActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PhysicInputActions @PhysicInput => new PhysicInputActions(this);

        // Ui Input
        private readonly InputActionMap m_UiInput;
        private List<IUiInputActions> m_UiInputActionsCallbackInterfaces = new List<IUiInputActions>();
        private readonly InputAction m_UiInput_Newaction;
        public struct UiInputActions
        {
            private @PlayerInputMap m_Wrapper;
            public UiInputActions(@PlayerInputMap wrapper) { m_Wrapper = wrapper; }
            public InputAction @Newaction => m_Wrapper.m_UiInput_Newaction;
            public InputActionMap Get() { return m_Wrapper.m_UiInput; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(UiInputActions set) { return set.Get(); }
            public void AddCallbacks(IUiInputActions instance)
            {
                if (instance == null || m_Wrapper.m_UiInputActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_UiInputActionsCallbackInterfaces.Add(instance);
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }

            private void UnregisterCallbacks(IUiInputActions instance)
            {
                @Newaction.started -= instance.OnNewaction;
                @Newaction.performed -= instance.OnNewaction;
                @Newaction.canceled -= instance.OnNewaction;
            }

            public void RemoveCallbacks(IUiInputActions instance)
            {
                if (m_Wrapper.m_UiInputActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IUiInputActions instance)
            {
                foreach (var item in m_Wrapper.m_UiInputActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_UiInputActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public UiInputActions @UiInput => new UiInputActions(this);
        public interface IPhysicInputActions
        {
            void OnLook(InputAction.CallbackContext context);
            void OnMove(InputAction.CallbackContext context);
            void OnSprint(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
        }
        public interface IUiInputActions
        {
            void OnNewaction(InputAction.CallbackContext context);
        }
    }
}
